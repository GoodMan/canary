//
//  ORSAuthenticator.m
//  Canary
//
//  Created by Nicholas Toumpelis on 18/03/2008.
//  Copyright 2008 Ocean Road Software. All rights reserved.
//
//  0.2 - 16/04/2008
//  0.5 - 03/10/2008
//  0.6 - 18/10/2008

#import "ORSAuthenicator.h"

@implementation ORSAuthenicator

// Determines whether the specified user has a password in the keychain.
- (BOOL) hasPasswordForUser:(NSString *)username {
	passwordData = nil;
	OSStatus result = SecKeychainFindGenericPassword(NULL, APP_CNAME_LENGTH, 
		APP_CNAME, [username lengthOfBytesUsingEncoding:NSASCIIStringEncoding],
		[username cStringUsingEncoding:NSASCIIStringEncoding], &passwordLength, 
											&passwordData, &loginItem);
	lastCheckedUsername = username;
	if (result == 0) {
		NSLog(@"ORSAuthenticator:: hasPasswordForUser:%@ --YES", 
			username);
		return YES;
	} else {
		NSLog(@"ORSAuthenticator:: hasPasswordForUser:%@ --NO", 
			username);
		return NO;
	}
}

// Retrieves the password for the specified user
- (NSString *) passwordForUser:(NSString *)username {
	if (![username isEqualToString:lastCheckedUsername]) {
		passwordData = nil;
		SecKeychainFindGenericPassword(NULL, APP_CNAME_LENGTH, APP_CNAME, 
			[username lengthOfBytesUsingEncoding:NSASCIIStringEncoding],
			[username cStringUsingEncoding:NSASCIIStringEncoding], 
				&passwordLength, &passwordData, &loginItem);
	}
	NSString *password = [[NSString alloc] initWithBytes:passwordData 
												  length:passwordLength
										encoding:NSASCIIStringEncoding];
	NSLog(@"ORSAuthenticator:: passwordForUser:%@ --%@", username,
		  password);
	return password;
}

// Adds a password to the keychain manager for the specified username
- (BOOL) addPassword:(NSString *)password
			 forUser:(NSString *)username {
	OSStatus result = SecKeychainAddGenericPassword(NULL, APP_CNAME_LENGTH, 
		APP_CNAME, [username lengthOfBytesUsingEncoding:NSASCIIStringEncoding], 
		[username cStringUsingEncoding:NSASCIIStringEncoding], 
		[password lengthOfBytesUsingEncoding:NSASCIIStringEncoding],
		[password cStringUsingEncoding:NSASCIIStringEncoding], &loginItem);
	if (result == 0) {
		NSLog(@"ORSAuthenticator:: addPassword:%@ forUser:%@ --YES", 
			password, username);
		return YES;
	} else {
		NSLog(@"ORSAuthenticator:: addPassword:%@ forUser:%@ --NO", 
			password, username);
		return NO;
	}
}

// Sets a password in the keychain manager for the specified username
- (BOOL) setPassword:(NSString *)password
			 forUser:(NSString *)username {
	[self hasPasswordForUser:username]; // gets loginItem
	OSStatus result = SecKeychainItemModifyAttributesAndData(loginItem, NULL, 
		[password lengthOfBytesUsingEncoding:NSASCIIStringEncoding], 
		[password cStringUsingEncoding:NSASCIIStringEncoding]);
	if (result == 0) {
		NSLog(@"ORSAuthenticator:: setPassword:%@ forUser:%@ --YES",
			password, username);
		return YES;
	} else {
		NSLog(@"ORSAuthenticator:: setPassword:%@ forUser:%@ --NO",
			password, username);
		return NO;
	}
}

// Returns the previously retrieved password
- (NSString *) fetchedPassword {
	NSString *password = [[NSString alloc] 
					   initWithBytes:passwordData 
							  length:passwordLength
							encoding:NSASCIIStringEncoding];
	NSLog(@"ORSAuthenticator:: fetchedPassword --%@", 
		  password);
	return password;
}

// Frees the data buffer
- (void) freeBuffer {
	SecKeychainItemFreeContent(NULL, passwordData);
	NSLog(@"ORSAuthenticator:: freeBuffer");
}

@end
