//
//  CanaryController.m
//  Canary
//
//  Created by Nicholas Toumpelis on 20/02/2008.
//  Copyright 2008 Ocean Road Software. All rights reserved.
//
//  0.2 - 16/04/2008
//  0.3 - 19/09/2008
//  0.4 - 23/09/2008
//  0.5 - 03/10/2008

#import "CanaryController.h"

@implementation CanaryController

@synthesize statuses, receivedDirectMessages, sentDirectMessages, visibleUserID,
			followingStatusCache, repliesStatusCache, publicStatusCache, 
			archiveStatusCache, receivedMessagesCache, sentMessagesCache,
			firstFollowingCall, firstRepliesCall, firstPublicCall, 
			firstArchiveCall, firstReceivedMessagesCall, firstSentMessagesCall,
			lastFollowingStatusID, lastReplyStatusID, lastPublicStatusID,
			lastArchiveStatusID, lastReceivedMessageID, lastSentMessageID, 
			previousTimeline, favoritesStatusCache, firstFavoriteCall, 
			lastFavoriteStatusID;

static CanaryController *sharedCanaryController = nil;

// sharedController
+ (CanaryController *) sharedController {
    @synchronized(self) {
        if (sharedCanaryController == nil) {
            [[self alloc] init]; // assignment not done here
        }
    }
    return sharedCanaryController;
}

// allocWithZone
+ (id) allocWithZone:(NSZone *)zone {
    @synchronized(self) {
        if (sharedCanaryController == nil) {
            sharedCanaryController = [super allocWithZone:zone];
			// assignment and return on first allocation
            return sharedCanaryController;  
        }
    }
    return nil; //on subsequent allocation attempts return nil
}

// Initialize
+ (void) initialize {
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	NSMutableDictionary *appDefaults = [NSMutableDictionary dictionary];
	[appDefaults setObject:[NSNumber numberWithFloat:0.0]
					forKey:@"CanaryWindowX"];
	[appDefaults setObject:[NSNumber numberWithFloat:0.0]
					forKey:@"CanaryWindowY"];
	[appDefaults setObject:[NSNumber numberWithFloat:380.0]
					forKey:@"CanaryWindowWidth"];
	[appDefaults setObject:[NSNumber numberWithFloat:604.0]
					forKey:@"CanaryWindowHeight"];
	[appDefaults setObject:@"Every minute" forKey:@"CanaryRefreshPeriod"];
	[appDefaults setObject:@"250" forKey:@"CanaryMaxShownUpdates"];
	[appDefaults setObject:@"Cli.gs" forKey:@"CanarySelectedURLShortener"];
	[defaults registerDefaults:appDefaults];
	NSLog(@"CanaryController:: initialize");
}

// Init
- (id) init {
	if (self = [super init]) {		
		defaults = [[NSUserDefaults standardUserDefaults] retain];
		authenticator = [[[ORSAuthenicator alloc] init] retain];
		
		// Following cache
		followingStatusCache = [[NSMutableArray array] retain];
		firstFollowingCall = YES;
		lastFollowingStatusID = [[NSString string] retain];
		// Replies cache
		repliesStatusCache = [[NSMutableArray array] retain];
		firstRepliesCall = YES;
		lastReplyStatusID = [[NSString string] retain];
		// Public cache
		publicStatusCache = [[NSMutableArray array] retain];
		firstPublicCall = YES;
		lastPublicStatusID = [[NSString string] retain];
		// Archive cache
		archiveStatusCache = [[NSMutableArray array] retain];
		firstArchiveCall = YES;
		lastArchiveStatusID = [[NSString string] retain];
		// Received Messages cache
		receivedMessagesCache = [[NSMutableArray array] retain];
		firstReceivedMessagesCall = YES;
		lastReceivedMessageID = [[NSString string] retain];
		// Sent Messages cache
		sentMessagesCache = [[NSMutableArray array] retain];
		firstSentMessagesCall = YES;
		lastSentMessageID = [[NSString string] retain];
		// Favorites cache
		favoritesStatusCache = [[NSMutableArray array] retain];
		firstFavoriteCall = YES;
		lastFavoriteStatusID = [[NSString string] retain];
		
		// NotificationCenter stuff -- need to determine a way to find
		// which method to call
		NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
		[nc addObserver:self
			   selector:@selector(setStatusesAsynchronously:)
				   name:@"OTEStatusesDidFinishLoading"
				 object:nil];
		[nc addObserver:self
			   selector:@selector(setUsersAsynchronously:)
				   name:@"OTEUsersDidFinishLoading"
				 object:nil];
		[nc addObserver:self
			   selector:@selector(setDMsAsynchronously:)
				   name:@"OTEDMsDidFinishLoading"
				 object:nil];
		[nc addObserver:self
			   selector:@selector(addSentStatusAsynchronously:)
				   name:@"OTEStatusDidFinishLoading"
				 object:nil];
		[nc addObserver:self
			   selector:@selector(addSentDMsAsynchronously:)
				   name:@"OTEDMDidFinishSending"
				 object:nil];
		
		spokenCommands = [NSArray 
			arrayWithObjects:@"Tweet", @"Home", @"Refresh", nil];
		
		previousTimeline = @"";
				
		[self updateMaxNoOfShownUpdates];
		
		if ([defaults stringForKey:@"CanaryCurrentUserID"]) {
			NSString *sessionUserID = 
				[defaults stringForKey:@"CanaryCurrentUserID"];
			NSString *sessionPassword = NULL;
			if ([authenticator hasPasswordForUser:sessionUserID]) {
				sessionPassword = [authenticator passwordForUser:sessionUserID];
				twitterEngine = [[[ORSTwitterEngine alloc] initSynchronously:NO
											   withUserID:sessionUserID 
										andPassword:sessionPassword] retain];
				[self setVisibleUserID:[NSString stringWithFormat:@"     %@",
					[twitterEngine sessionUserID]]];
				NSLog(@"CanaryController:: init: sessionUserID:%@ se...word:%@", 
					  [twitterEngine sessionUserID], 
					  [twitterEngine sessionPassword]);
			} else {
				twitterEngine = [[[ORSTwitterEngine alloc] initSynchronously:NO 
											   withUserID:sessionUserID 
											  andPassword:NULL] retain];
			}
		} else {
			loginItem = nil;
			twitterEngine = [[[ORSTwitterEngine alloc] initSynchronously:NO 
										   withUserID:NULL 
										  andPassword:NULL] retain];
			[self setVisibleUserID:@"     Click here to login"];
			NSLog(@"CanaryController:: init");
		}
		[self updateSelectedURLShortener];
		updateDispatcher = [[[ORSUpdateDispatcher alloc] 
						 initWithEngine:twitterEngine] retain];
	}
	return self;
}

// Awake From Nib
- (void) awakeFromNib {
	if ([defaults floatForKey:@"CanaryWindowX"]) {
		NSRect newFrame = NSMakeRect([defaults floatForKey:@"CanaryWindowX"],
							[defaults floatForKey:@"CanaryWindowY"],
							[defaults floatForKey:@"CanaryWindowWidth"],
							[defaults floatForKey:@"CanaryWindowHeight"]);
		[[self window] setFrame:newFrame display:YES];
	}
	
	ORSDateDifferenceFormatter *dateDiffFormatter = 
		[[[ORSDateDifferenceFormatter alloc] init] retain];
	[[dateDifferenceTextField cell] setFormatter:dateDiffFormatter];
	[[receivedDMDateDifferenceTextField cell] setFormatter:dateDiffFormatter];
	[[sentDMDateDifferenceTextField cell] setFormatter:dateDiffFormatter];
}

// Delegate: calls all the necessary methods when the app starts
- (void) applicationDidFinishLaunching:(NSNotification *)aNotification {
	[self changeTimeline:self];
	NSLog(@"CanaryController:: applicationDidFinishLaunching");
}

// Delegate: closes the application when the window is closed
- (BOOL) applicationShouldTerminateAfterLastWindowClosed:(NSApplication *) 
sender {
	NSLog(@"CanaryController:: applicationShouldTerminateAfterLastWind...");
    return YES;
}

// Action: allows the user to send an update to Twitter
- (IBAction) sendUpdate:sender {
	if ([twitterEngine sessionUserID]) {
		[[charsLeftIndicator animator] setIntValue:0];
		[updateDispatcher addMessage:[newStatusTextField stringValue]];
		[newStatusTextField setStringValue:@""];
		[tweetButton setTitle:@"Tweet!"];
		[tweetButton setFont:[NSFont systemFontOfSize:[NSFont systemFontSize]]];
		NSLog(@"CanaryController:: sendUpdate");
	}
}

// Action: allows the user to change the active timeline
- (IBAction) changeTimeline:sender {
	if (([[timelineButton titleOfSelectedItem] isEqualToString:[self 
			previousTimeline]]) && [sender isEqualTo:timelineButton]) {
		return;
	}
	if ([[timelineButton titleOfSelectedItem] isEqualToString:@"Friends"]) {
		if ([sender isEqualTo:timelineButton] && 
				[followingStatusCache count] > 0) {
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[mainTimelineScrollView animator] setHidden:NO];
			[self setStatuses:followingStatusCache];
		}
		[self getFriendsTimeline];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Archive"]) {
		if ([sender isEqualTo:timelineButton] && 
				[archiveStatusCache count] > 0) {
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[mainTimelineScrollView animator] setHidden:NO];
			[self setStatuses:archiveStatusCache];
		}
		[self getUserTimeline];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Public"]) {
		if ([sender isEqualTo:timelineButton] && 
				[publicStatusCache count] > 0) {
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[mainTimelineScrollView animator] setHidden:NO];
			[self setStatuses:publicStatusCache];
		}
		[self getPublicTimeline];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Replies"]) {
		if ([sender isEqualTo:timelineButton] && 
				[repliesStatusCache count] > 0) {
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[mainTimelineScrollView animator] setHidden:NO];
			[self setStatuses:repliesStatusCache];
		}
		[self getReplies];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Favorites"]) {
		if ([sender isEqualTo:timelineButton] && 
				[favoritesStatusCache count] > 0) {
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[mainTimelineScrollView animator] setHidden:NO];
			[self setStatuses:favoritesStatusCache];
		}
		[self getFavorites];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Received messages"]) {
		if ([sender isEqualTo:timelineButton] && 
				[receivedMessagesCache count] > 0) {
			[[mainTimelineScrollView animator] setHidden:YES];
			[[sentDMsScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:NO];
			[self setReceivedDirectMessages:receivedMessagesCache];
		}
		[self getReceivedMessages];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Sent messages"]) {
		if ([sender isEqualTo:timelineButton] && 
				[sentMessagesCache count] > 0) {
			[[mainTimelineScrollView animator] setHidden:YES];
			[[receivedDMsScrollView animator] setHidden:YES];
			[[sentDMsScrollView animator] setHidden:NO];
			[self setSentDirectMessages:sentMessagesCache];
		}
		[self getSentMessages];
	}
	previousTimeline = [timelineButton titleOfSelectedItem];
	[self updateTimer];
	NSLog(@"CanaryController:: changeTimeline");
}

- (void) updateTimer {
	float refreshPeriod = [self timelineRefreshPeriod];
	[refreshTimer invalidate];
	if (refreshPeriod > -1.0) {
		if ([[timelineButton titleOfSelectedItem] isEqualToString:@"Friends"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod 
				target:self selector:@selector(getFriendsTimeline) userInfo:nil 
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Archive"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
					target:self selector:@selector(getUserTimeline) userInfo:nil 
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Public"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
				target:self selector:@selector(getPublicTimeline) userInfo:nil
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Replies"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
					target:self selector:@selector(getReplies) userInfo:nil 
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Favorites"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
				target:self selector:@selector(getFavorites) userInfo:nil 
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Received messages"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
				target:self selector:@selector(getReceivedMessages) userInfo:nil 
														   repeats:YES];
		} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Sent messages"]) {
			refreshTimer = [NSTimer scheduledTimerWithTimeInterval:refreshPeriod
				target:self selector:@selector(getSentMessages) userInfo:nil 
														   repeats:YES];
		}
	}
}

- (void) updateMaxNoOfShownUpdates {
	int maxNoOfShownUpdates = [self maxShownUpdates];
	[mainTimelineCollectionView setMaxNumberOfRows:maxNoOfShownUpdates];
	[receivedDMsCollectionView setMaxNumberOfRows:maxNoOfShownUpdates];
	[sentDMsCollectionView setMaxNumberOfRows:maxNoOfShownUpdates];
}

- (void) updateSelectedURLShortener {
	urlShortener = [ORSShortenerFactory getShortener:[self
													  selectedURLShortener]];
}

// Sets the statuses asynchronously
- (void) setStatusesAsynchronously:(NSNotification *)note {	
	NSPoint oldScrollOrigin = [[mainTimelineScrollView contentView] 
							   bounds].origin;
	if ([[timelineButton titleOfSelectedItem] isEqualToString:@"Friends"]) {
		if (firstFollowingCall) {
			[followingStatusCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet 
				indexSetWithIndexesInRange:NSMakeRange(0, 
					[(NSArray *)[note object] count])];
			[followingStatusCache insertObjects:(NSArray *)[note object] 
									  atIndexes:indexSet];
		}
		[self setStatuses:followingStatusCache];
		
		// marking the latest id
		NSError *error = NULL;
		if ([followingStatusCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[followingStatusCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode 
									  nodesForXPath:@".//id" error:&error];
			NSXMLNode *lastCreatedAtNode = 
				(NSXMLNode *)[lastCreatedAt objectAtIndex:0];
			lastFollowingStatusID = [[lastCreatedAtNode stringValue] retain];
			firstFollowingCall = NO;
		}
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Archive"]) {
		if (firstArchiveCall) {
			[archiveStatusCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet 
				indexSetWithIndexesInRange:NSMakeRange(0, 
					[(NSArray *)[note object] count])];
			[archiveStatusCache insertObjects:(NSArray *)[note object] 
									  atIndexes:indexSet];
		}
		[self setStatuses:archiveStatusCache];
		
		// marking the latest id
		NSError *error = NULL;
		if ([archiveStatusCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[archiveStatusCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode 
								  nodesForXPath:@".//id" error:&error];
			NSXMLNode *lastCreatedAtNode = 
				(NSXMLNode *)[lastCreatedAt objectAtIndex:0];
			lastArchiveStatusID = [[lastCreatedAtNode stringValue] retain];
			firstArchiveCall = NO;
		}
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Public"]) {
		if (firstPublicCall) {
			[publicStatusCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet 
				indexSetWithIndexesInRange:NSMakeRange(0, 					   
					[(NSArray *)[note object] count])];
			[publicStatusCache insertObjects:(NSArray *)[note object] 
					atIndexes:indexSet];
		}
		[self setStatuses:publicStatusCache];
		
		// marking the latest id
		NSError *error = NULL;
		if ([publicStatusCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[publicStatusCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode nodesForXPath:@".//id" 
													   error:&error];
			NSXMLNode *lastCreatedAtNode = 
				(NSXMLNode *)[lastCreatedAt objectAtIndex:0];
			lastPublicStatusID = [[lastCreatedAtNode stringValue] retain];
			firstPublicCall = NO;
		}
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Replies"]) {
		if (firstRepliesCall) {
			[repliesStatusCache setArray:(NSArray *)[note object]];
			firstRepliesCall = NO;
		} else {
			NSIndexSet *indexSet = [NSIndexSet 
				indexSetWithIndexesInRange:NSMakeRange(0, 
					[(NSArray *)[note object] count])];
			[repliesStatusCache insertObjects:(NSArray *)[note object] 
									  atIndexes:indexSet];
		}
		[self setStatuses:repliesStatusCache];
		
		// marking the latest id
		NSError *error = NULL;
		if ([repliesStatusCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[repliesStatusCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode 
									  nodesForXPath:@".//id" error:&error];
			NSXMLNode *lastCreatedAtNode = 
			(NSXMLNode *)[lastCreatedAt objectAtIndex:0];
			lastReplyStatusID = [[lastCreatedAtNode stringValue] retain];
			firstRepliesCall = NO;
		}
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Favorites"]) {
		if (firstFavoriteCall) {
			[favoritesStatusCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet
				indexSetWithIndexesInRange:NSMakeRange(0,
						[(NSArray *)[note object] count])];
			[favoritesStatusCache insertObjects:(NSArray *)[note object]
									  atIndexes:indexSet];
		}
		[self setStatuses:favoritesStatusCache];
		// marking the latest id
		NSError *error = NULL;
		if ([favoritesStatusCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[favoritesStatusCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode 
									  nodesForXPath:@".//id" error:&error];
			NSXMLNode *lastCreatedAtNode = 
				(NSXMLNode *)[lastCreatedAt objectAtIndex:0];
			lastFavoriteStatusID = [[lastCreatedAtNode stringValue] retain];
			firstFavoriteCall = NO;
		}
	}
	[indicator stopAnimation:self];
	[[mainTimelineScrollView documentView] scrollPoint:oldScrollOrigin];
	[charsLeftIndicator setHidden:NO];
	[[receivedDMsScrollView animator] setHidden:YES];
	[[sentDMsScrollView animator] setHidden:YES];
	[[mainTimelineScrollView animator] setHidden:NO];
	NSLog(@"CanaryController:: setStatusesAsynchronously:");
}

// Sets the users asynchronously
- (void) setUsersAsynchronously:(NSNotification *)note {
	// Not implemented yet
	NSPoint oldScrollOrigin = [[mainTimelineScrollView contentView] 
							   bounds].origin;
	[indicator stopAnimation:self];
	[charsLeftIndicator setHidden:NO];
	[[mainTimelineScrollView documentView] scrollPoint:oldScrollOrigin];
	NSLog(@"CanaryController:: setUsersAsynchronously:");
}

// Sets the DMs asynchronously
- (void) setDMsAsynchronously:(NSNotification *)note {
	NSPoint oldScrollOrigin;
	if ([[timelineButton titleOfSelectedItem] 
			isEqualToString:@"Received messages"]) {
		oldScrollOrigin = [[receivedDMsScrollView contentView] 
								   bounds].origin;
		if (firstReceivedMessagesCall) {
			[receivedMessagesCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet indexSetWithIndexesInRange:
				NSMakeRange(0, [(NSArray *)[note object] count])];
			[receivedMessagesCache insertObjects:(NSArray *)[note object] 
									   atIndexes:indexSet];
		}
		[self setReceivedDirectMessages:receivedMessagesCache];
	
		// marking the latest id
		NSError *error = NULL;
		if ([receivedMessagesCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[receivedMessagesCache 
													objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode nodesForXPath:@".//id" 
													   error:&error];
			NSXMLNode *lastCreatedAtNode = (NSXMLNode *)[lastCreatedAt 
													 objectAtIndex:0];
			lastReceivedMessageID = [[lastCreatedAtNode stringValue] retain];
			firstReceivedMessagesCall = NO;
		}
		[[mainTimelineScrollView animator] setHidden:YES];
		[[sentDMsScrollView animator] setHidden:YES];
		[[receivedDMsScrollView animator] setHidden:NO];
		[[receivedDMsScrollView documentView] scrollPoint:oldScrollOrigin];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Sent messages"]) {
		oldScrollOrigin = [[sentDMsScrollView contentView] 
						   bounds].origin;
		if (firstSentMessagesCall) {
			[sentMessagesCache setArray:(NSArray *)[note object]];
		} else {
			NSIndexSet *indexSet = [NSIndexSet indexSetWithIndexesInRange:
				NSMakeRange(0, [(NSArray *)[note object] count])];
			[sentMessagesCache insertObjects:(NSArray *)[note object] 
									   atIndexes:indexSet];
		}
		[self setSentDirectMessages:sentMessagesCache];
		
		// marking the latest id
		NSError *error = NULL;
		if ([sentMessagesCache count] > 0) {
			NSXMLNode *lastNode = (NSXMLNode *)[sentMessagesCache 
												objectAtIndex:0];
			NSArray *lastCreatedAt = [lastNode nodesForXPath:@".//id" 
													   error:&error];
			NSXMLNode *lastCreatedAtNode = (NSXMLNode *)[lastCreatedAt 
														 objectAtIndex:0];
			lastSentMessageID = [[lastCreatedAtNode stringValue] retain];
			firstSentMessagesCall = NO;
		}
		
		[[mainTimelineScrollView animator] setHidden:YES];
		[[receivedDMsScrollView animator] setHidden:YES];
		[[sentDMsScrollView animator] setHidden:NO];
		[[sentDMsScrollView documentView] scrollPoint:oldScrollOrigin];
	}
	[indicator stopAnimation:self];
	[charsLeftIndicator setHidden:NO];
	
	NSLog(@"CanaryController:: setDMsAsynchronously:");
}

// Sets the sent status asynchronously
- (void) addSentStatusAsynchronously:(NSNotification *)note {
	NSPoint oldScrollOrigin = [[mainTimelineScrollView contentView] 
							   bounds].origin;
	NSMutableArray *cache;
	if ([[timelineButton titleOfSelectedItem] isEqualToString:@"Friends"]) {
		cache = [NSMutableArray arrayWithArray:[self statuses]];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Archive"]) {
		cache = [NSMutableArray arrayWithArray:[self statuses]];
	}
	[cache insertObject:[note object] atIndex:0];
	[self setStatuses:cache];
	[[mainTimelineScrollView documentView] scrollPoint:oldScrollOrigin];
	NSLog(@"CanaryController:: addSentStatusAsynchronously:");
}

// Sets the sent direct messages asynchronously
- (void) addSentDMsAsynchronously:(NSNotification *)note {
	if ([[timelineButton titleOfSelectedItem] 
			isEqualToString:@"Sent Messages"]) {
		NSPoint oldScrollOrigin = [[sentDMsScrollView contentView] 
								   bounds].origin;
		NSMutableArray *cache = [NSMutableArray 
							 arrayWithArray:[self sentDirectMessages]];
	
		[cache insertObject:[note object] atIndex:0];
		[self setSentDirectMessages:cache];
		[[mainTimelineScrollView animator] setHidden:YES];
		[[receivedDMsScrollView animator] setHidden:YES];
		[[sentDMsScrollView animator] setHidden:NO];
		[[sentDMsScrollView documentView] scrollPoint:oldScrollOrigin];
		[indicator stopAnimation:self];
		[charsLeftIndicator setHidden:NO];
	}
	NSLog(@"CanaryController:: addSentDMsAsynchronously:");
}

// Gets the friends timeline
- (void) getFriendsTimeline {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstFollowingCall)
			[twitterEngine getFriendsTimeline];
		else
			[twitterEngine 
			 getFriendsTimelineSinceStatus:lastFollowingStatusID];
	}
	NSLog(@"CanaryController:: getFriendsTimeline");
}

// Gets the user timeline
- (void) getUserTimeline {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstArchiveCall)
			[twitterEngine getUserTimelineForUser:[twitterEngine sessionUserID]];
		else
			[twitterEngine getUserTimelineSinceStatus:lastArchiveStatusID];
	}
	NSLog(@"CanaryController:: getUserTimeline");
}

// Gets the public timeline
- (void) getPublicTimeline {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstPublicCall)
			[twitterEngine getPublicTimeline];
		else
			[twitterEngine getPublicTimelineSinceStatus:lastPublicStatusID];
	}
	NSLog(@"CanaryController:: getPublicTimeline");
}

// Gets the replies
- (void) getReplies {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstRepliesCall)
			[twitterEngine getReplies];
		else
			[twitterEngine getRepliesSinceStatus:lastReplyStatusID];
	}
	NSLog(@"CanaryController:: getReplies");
}

// Gets the favorites
- (void) getFavorites {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstFavoriteCall)
			//[twitterEngine getFavorites];
			[twitterEngine getFavoritesForUser:[twitterEngine sessionUserID]];
		else
			[twitterEngine getFavoritesSinceStatus:lastFavoriteStatusID];
	}
	NSLog(@"CanaryController:: getFavorites");
}

// Gets the received messages
- (void) getReceivedMessages {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstReceivedMessagesCall)
			[twitterEngine getReceivedDMs];
		else
			[twitterEngine getReceivedDMsSinceDM:lastReceivedMessageID];
	}
	NSLog(@"CanaryController:: getReceivedDMs");
}

// Gets the sent messages
- (void) getSentMessages {
	if ([twitterEngine sessionUserID]) {
		[charsLeftIndicator setHidden:YES];
		[indicator startAnimation:self];
		if (firstSentMessagesCall)
			[twitterEngine getSentDMs];
		else
			[twitterEngine getSentDMsSinceDM:lastSentMessageID];
	}
	NSLog(@"CanaryController:: getSentDMs");
}

// Action: opens the user's home page (if they are logged in)
- (IBAction) goHome:sender {
	NSURL *homeURL = [[NSURL alloc] initWithString:@"http://twitter.com/home"];
	[[NSWorkspace sharedWorkspace] openURL:homeURL];
	NSLog(@"CanaryController:: goHome:%@", sender);
}

// Action: shows the user manager sheet
- (IBAction) showUserManagerSheet:sender {	
	prevUserID = [twitterEngine sessionUserID];
	prevPassword = [twitterEngine sessionPassword];
	[NSApp beginSheet:userManagerWindow
	   modalForWindow:[NSApp mainWindow]
		modalDelegate:self
	   didEndSelector:@selector(didEndUserManagerSheet:returnCode:contextInfo:)
		  contextInfo:nil];
	[self fillPasswordTextField];
	NSLog(@"CanaryController:: showUserManagerSheet");
}

// Action: calls the sheetDidEnd method with a return code of 0 (closes the 
// sheet)
- (IBAction) closeUserManagerSheet:sender {
	[twitterEngine setSessionUserID:prevUserID];
	[twitterEngine setSessionPassword:prevPassword];
	[userManagerWindow orderOut:sender];
	[NSApp endSheet:userManagerWindow returnCode:0];
	NSLog(@"CanaryController:: closeUserManagerSheet");
}

// Action: calls the sheetDidEnd method with a return code of 1 (login)
- (IBAction) login:sender {
	[twitterEngine endSession];
	[twitterEngine setSessionUserID:NULL];
	[twitterEngine setSessionPassword:NULL];
	[authenticatedTextField setStringValue:@"Authenticating..."];
	[twitterEngine setSessionUserID:[userIDComboBox stringValue]];
	[twitterEngine setSessionPassword:[passwordSecureTextField 
									   stringValue]];
 	if ([twitterEngine verifyCredentials]) {
		[authenticatedTextField setStringValue:@"Authenticated."];
		[userManagerWindow orderOut:sender];
		[NSApp endSheet:userManagerWindow returnCode:1];
	} else {
		[authenticatedTextField setStringValue:@"Could not be authenticated."];
		[twitterEngine setSessionUserID:prevUserID];
		[twitterEngine setSessionPassword:prevPassword];
	}
	NSLog(@"CanaryController:: login");
}

// sheetDidEnd: Determines the course of action depending on what the user 
// clicked
- (void) didEndUserManagerSheet:(NSWindow *)sheet
					 returnCode:(int)returnCode
					contextInfo:(void *)contextInfo {
	if (returnCode == 0) {
		NSLog(@"CanaryController:: didEndUserManagerSheet:... rc:0");
		return;
	} else if (returnCode == 1) {
		[favoritesStatusCache removeAllObjects];
		[followingStatusCache removeAllObjects];
		[repliesStatusCache removeAllObjects];
		[publicStatusCache removeAllObjects];
		[archiveStatusCache removeAllObjects];
		[receivedMessagesCache removeAllObjects];
		[sentMessagesCache removeAllObjects];
		
		firstFavoriteCall = YES;
		firstFollowingCall = YES;
		firstRepliesCall = YES;
		firstPublicCall = YES;
		firstArchiveCall = YES;
		firstReceivedMessagesCall = YES;
		firstSentMessagesCall = YES;
		
		[self setStatuses:nil];
		[self setReceivedDirectMessages:nil];
		[self setSentDirectMessages:nil];
		
		// Need to make this simpler
		[defaults setObject:[userIDComboBox stringValue]
					 forKey:@"CanaryCurrentUserID"];
		NSArray *userIDList = [defaults stringArrayForKey:@"CanaryUserIDList"];
		NSMutableArray *mutableUserIDList;
		if (!userIDList) {
			mutableUserIDList = [NSMutableArray array];
		} else {
			mutableUserIDList = [NSMutableArray arrayWithArray:userIDList];
		}			
		if (![mutableUserIDList containsObject:[userIDComboBox stringValue]]) {
			[mutableUserIDList addObject:[userIDComboBox stringValue]];
			[defaults setObject:mutableUserIDList forKey:@"CanaryUserIDList"];
			[authenticator addPassword:[passwordSecureTextField stringValue]
							forUser:[userIDComboBox stringValue]];
		}
		[twitterEngine setSessionUserID:[userIDComboBox stringValue]];
		[twitterEngine setSessionPassword:[passwordSecureTextField 
										   stringValue]];
		if (![authenticator setPassword:[passwordSecureTextField stringValue]
							 forUser:[userIDComboBox stringValue]]) {
			[authenticator addPassword:[passwordSecureTextField stringValue] 
							forUser:[userIDComboBox stringValue]];
			[twitterEngine setSessionUserID:[userIDComboBox stringValue]];
			[twitterEngine setSessionPassword:[passwordSecureTextField 
											   stringValue]];
		}
		[self setVisibleUserID:[NSString stringWithFormat:@"     %@",
								[twitterEngine sessionUserID]]];
		
		[self changeTimeline:nil];
		NSLog(@"CanaryController:: didEndUserManagerSheet:... rc:1");
	}
}

// Action: Called when the user wants to autotype the user id to reply to.
- (IBAction) typeUserID:sender {
	NSText *fieldEditor = [[self window] fieldEditor:YES 
										   forObject:newStatusTextField];
	int location = [fieldEditor selectedRange].location;
	[[self window] makeFirstResponder:nil];
	[[self window] makeFirstResponder:newStatusTextField];
	[fieldEditor setSelectedRange:[fieldEditor selectedRange]];
	NSMutableString *statusString = [NSMutableString 
		stringWithString:[newStatusTextField stringValue]];
	NSCharacterSet *whitespaceCharset = 
		[NSCharacterSet whitespaceAndNewlineCharacterSet];
	NSString *username;
	if ((location == 0) || ([whitespaceCharset characterIsMember:[statusString characterAtIndex:location-1]]))
		username = [NSString stringWithFormat:@"@%@ ", sender];
	else
		username = [NSString stringWithFormat:@" @%@ ", sender];
	
	[statusString insertString:username atIndex:location];
	[newStatusTextField setStringValue:statusString];
	[self controlTextDidChange:nil];
	[fieldEditor setSelectedRange:NSMakeRange(location+[username length], 0)];
	[fieldEditor setNeedsDisplay:YES];
	NSLog(@"CanaryController:: typeUserID: %@", sender);
}

// Action: Called when the user wants to autotype "d" + user id to send 
// message to.
- (IBAction) dmUserID:sender {
	NSText *fieldEditor = [[self window] fieldEditor:YES 
										   forObject:newStatusTextField];
	int location = [fieldEditor selectedRange].location;
	[[self window] makeFirstResponder:nil];
	[[self window] makeFirstResponder:newStatusTextField];
	[fieldEditor setSelectedRange:[fieldEditor selectedRange]];
	NSMutableString *statusString = [NSMutableString 
							stringWithString:[newStatusTextField stringValue]];
	NSCharacterSet *whitespaceCharset = 
	[NSCharacterSet whitespaceAndNewlineCharacterSet];
	NSString *username;
	if ((location == 0) || ([whitespaceCharset characterIsMember:[statusString characterAtIndex:location-1]]))
		username = [NSString stringWithFormat:@"d %@ ", sender];
	else
		username = [NSString stringWithFormat:@" d %@ ", sender];
	
	[statusString insertString:username atIndex:location];
	[newStatusTextField setStringValue:statusString];
	[self controlTextDidChange:nil];
	[fieldEditor setSelectedRange:NSMakeRange(location+[username length], 0)];
	[fieldEditor setNeedsDisplay:YES];
	NSLog(@"CanaryController:: dmUserID: %@", sender);
}

// Action: This shortens the given URL using the TinyURL service.
- (IBAction) shortenURL:sender {
	NSText *editor = [newStatusTextField currentEditor];
	[editor copy:self];
	[editor replaceCharactersInRange:[editor selectedRange] 
		withString:[urlShortener generateURLFrom:[[editor string] 
								substringWithRange:[editor selectedRange]]]];
	[self controlTextDidChange:nil];
	NSLog(@"CanaryController:: shortenURL: %@", sender);
}

// Action: This is called whenever the user wishes to open a user url.
- (IBAction) openUserURL:sender {
	NSURL *userURL = [[NSURL alloc] initWithString:(NSString *)sender];
	[[NSWorkspace sharedWorkspace] openURL:userURL];
	NSLog(@"CanaryController:: openUserURL:%@", sender);
}

// Delegate: This is called whenever the application terminates
- (void) applicationWillTerminate:(NSNotification *)notification {
	[twitterEngine endSession];
	[defaults setFloat:[[self window] frame].origin.x
				forKey:@"CanaryWindowX"];
	[defaults setFloat:[[self window] frame].origin.y
				forKey:@"CanaryWindowY"];
	[defaults setFloat:[[self window] frame].size.width
				forKey:@"CanaryWindowWidth"];
	[defaults setFloat:[[self window] frame].size.height
				forKey:@"CanaryWindowHeight"];
	NSLog(@"CanaryController:: applicationWillTerminate:");
}

// Delegate: Whenever the combo box selection changes, we fill the password text 
// field
- (void) comboBoxSelectionDidChange:(NSNotification *)notification {
	[authenticatedTextField setStringValue:@""];
	[self fillPasswordTextField];
	NSLog(@"CanaryController:: comboBoxSelectionDidChange:");
}

// Fills the password text field with the password
- (void) fillPasswordTextField {
	if ([authenticator hasPasswordForUser:[userIDComboBox stringValue]]) {
		[passwordSecureTextField setStringValue:[authenticator 
												 fetchedPassword]];
		[authenticator freeBuffer];
	} else {
		[passwordSecureTextField setStringValue:@""];
	}
	NSLog(@"CanaryController:: fillPasswordTextField");
}

// Delegate: Changes the green bar and enables/disables the tweet button.
- (void) controlTextDidChange:(NSNotification *)aNotification {
	if ([aNotification object] == userIDComboBox) {
		if ([[userIDComboBox stringValue] isEqualToString:@""] ||
				[[userIDComboBox stringValue] isEqualToString:@" "])
			[passwordSecureTextField setStringValue:@""];
	} else {
		int charsWritten = [[newStatusTextField stringValue] length];
		int charsLeft = 140 - charsWritten;
		[charsLeftIndicator setIntValue:charsWritten];
		if ([[newStatusTextField stringValue] hasPrefix:@"d "] ||
				[[newStatusTextField stringValue] hasPrefix:@"D "]) {
			[tweetButton setTitle:@"Message!"];
			if (charsLeft < 0)
				[tweetButton setEnabled:NO];
			else {
				if ([tweetButton isEnabled])
					return;
				else
					[tweetButton setEnabled:YES];
			}
		} else {
			if (charsLeft < 0)
				[tweetButton setTitle:[NSString stringWithFormat:@"Twt ×%i", 
									   (charsWritten / 136)+1]];
			else {
				if ([[tweetButton title] isEqualToString:@"Tweet!"])
					return;
				else
					[tweetButton setTitle:@"Tweet!"];
			}
		}
	}
}

// Action: This is called whenever the user performs an action on a status
// or user.
- (IBAction) invokeActionOnUser:sender {
	NSString *userScreenName, *userURL;
	if ([[timelineButton titleOfSelectedItem] 
		 isEqualToString:@"Received messages"]) {
		userScreenName = [(NSXMLNode *)[sender toolTip] senderScreenName];
		userURL = [(NSXMLNode *)[sender toolTip] senderURL];
	} else if ([[timelineButton titleOfSelectedItem] 
				isEqualToString:@"Sent messages"]) {
		userScreenName = [(NSXMLNode *)[sender toolTip] recipientScreenName];
		userURL = [(NSXMLNode *)[sender toolTip] recipientURL];
	} else {
		userScreenName = [(NSXMLNode *)[sender toolTip] userScreenName];
		userURL = [(NSXMLNode *)[sender toolTip] userURL];
	}
	
	if ([[sender titleOfSelectedItem] isEqualToString:@"Add"]) {
		[self createFriendshipWithUser:userScreenName];
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Remove"]) {
		[self destroyFriendshipWithUser:userScreenName];
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Follow"]) {
		[self followUserWithID:userScreenName];	
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Leave"]) {
		[self leaveUserWithID:userScreenName];	
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Block"]) {
		[self blockUserWithID:userScreenName];
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Unblock"]) {
		[self unblockUserWithID:userScreenName];
	} else if ([[sender titleOfSelectedItem] isEqualToString:@"Reply to"]) {
		[self typeUserID:userScreenName];
	} else if ([[sender titleOfSelectedItem] 
				isEqualToString:@"Message directly"]) {
		[self dmUserID:userScreenName];
	} else if ([[sender titleOfSelectedItem] 
				isEqualToString:@"Favorite this"]) {
		[self favoriteStatusWithID:[(NSXMLNode *)[sender toolTip] ID]];
	} else if ([[sender titleOfSelectedItem] 
				isEqualToString:@"Go to Web page"]) {
		[self openUserURL:userURL];
	} else if ([[sender titleOfSelectedItem] 
				isEqualToString:@"Go to Twitter page"]) {
		[self openUserURL:[NSString stringWithFormat:@"http://twitter.com/%@",
						   userScreenName]];
	}
}

// Action: This is called when the about window needs to be shown.
- (IBAction) showAboutWindow:sender {
	ORSCanaryAboutController *aboutController =
		[[ORSCanaryAboutController alloc] initWithWindowNibName:@"About"];
	[[aboutController window] makeKeyAndOrderFront:sender];
	NSLog(@"CanaryController:: showAboutWindow:");
	//[aboutWindow makeKeyAndOrderFront:sender];
}

// Action: This is called when the preferences window needs to be shown.
- (IBAction) showPreferencesWindow:sender {
	ORSCanaryPreferencesController *preferencesController =
	[[ORSCanaryPreferencesController alloc] initWithWindowNibName:@"Preferences"];
	[[preferencesController window] makeKeyAndOrderFront:sender];
	NSLog(@"CanaryController:: showPreferencesWindow:");
}

// Action: This is called when the user sends feedback
- (IBAction) sendFeedback:sender {
	NSURL *url = [NSURL URLWithString:@"mailto:nicktoumpelis@gmail.com"
		"?subject=Feedback%20for%20Canary"
		"&body=Please%20write%20your%20feedback%20here..."];
	assert(url != nil);
		
	// Open the URL.		
	[[NSWorkspace sharedWorkspace] openURL:url];
}


// Speech-related methods

// Action: This is called 
- (IBAction) listen:sender {
	if ([sender state] == NSOffState) {
		// Speech recognition
		recognizer = [[NSSpeechRecognizer alloc] init];
		[recognizer setCommands:spokenCommands];
		[recognizer setDelegate:self];
		[recognizer startListening];
		[sender setState:NSOnState];
	} else {
		[recognizer stopListening];
		[recognizer release];
		recognizer = NULL;
		[sender setState:NSOffState];
	}
}

// Delegate: acts upon the recognition of certain commands
- (void) speechRecognizer:(NSSpeechRecognizer *)sender
	  didRecognizeCommand:(id)command {
	if ([(NSString *)command isEqualToString:@"Tweet"]) {
		[self sendUpdate:sender];
		return;
	}
	if ([(NSString *)command isEqualToString:@"Home"]) {
		[self goHome:sender];
		return;
	}
	if ([(NSString *)command isEqualToString:@"Refresh"]) {
		[self changeTimeline:sender];
		return;
	}
}


// Friendship methods

// Add user with given ID from friends list (following)
- (void) createFriendshipWithUser:(NSString *)userID {
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine createFriendshipWithUser:userID];
		NSLog(@"CanaryController:: createFriendshipWithUser: %@", 
			  result ? @"YES" : @"NO");
	}
}

// Remove user with given ID from friends list (following)
- (void) destroyFriendshipWithUser:(NSString *)userID {
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine destroyFriendshipWithUser:userID];
		NSLog(@"CanaryController:: destroyFriendshipWithUser: %@", 
			  result ? @"YES" : @"NO");
	}
}


// Block methods

// Block the user owning the status
- (void) blockUserWithID:(NSString *)userID { 
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine blockUser:userID];
		NSLog(@"CanaryController:: blockUser: %@", result ? @"YES" : @"NO");
	}
}

// Unblock the user owning the status
- (void) unblockUserWithID:(NSString *)userID {
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine unblockUser:userID];
		NSLog(@"CanaryController:: unblockUser: %@", result ? @"YES" : @"NO");
	}
}


// Notification methods

// Follow the user owning the status
- (void) followUserWithID:(NSString *)userID {
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine followUser:userID];
		NSLog(@"CanaryController:: followUser: %@", result ? @"YES" : @"NO");
	}
}

// Leave the user owning the status
- (void) leaveUserWithID:(NSString *)userID {
	if ([twitterEngine sessionUserID]) {
		BOOL result = [twitterEngine leaveUser:userID];
		NSLog(@"CanaryController:: leaveUser: %@", result ? @"YES" : @"NO");
	}
}


// Favorite methods

// Favorite the selected status
- (void) favoriteStatusWithID:(NSString *)statusID {
	if ([twitterEngine sessionUserID]) {
		[twitterEngine createBlindFavorite:statusID];
		NSLog(@"CanaryController:: favoriteStatusWithID:");
	}
}


// Methods using the main preferences

// Returns the refresh rate selected by the user.
- (float) timelineRefreshPeriod {
	NSString *timelineRefreshPeriodString = (NSString *)[defaults 
									objectForKey:@"CanaryRefreshPeriod"];
	if ([timelineRefreshPeriodString isEqualToString:@"Manually"])
		return -1.0;
	else if ([timelineRefreshPeriodString isEqualToString:@"Every minute"])
		return 60.0;
	else if ([timelineRefreshPeriodString isEqualToString:@"Every two minutes"])
		return 120.0;
	else if ([timelineRefreshPeriodString 
			  isEqualToString:@"Every three minutes"])
		return 180.0;
	else if ([timelineRefreshPeriodString 
			  isEqualToString:@"Every five minutes"])
		return 300.0;
	else if ([timelineRefreshPeriodString isEqualToString:@"Every ten minutes"])
		return 600.0;
	else
		return -1.0;
}

// Returns the number of number of updates kept in the timeline
- (int) maxShownUpdates {
	NSString *maxShownUpdatesString = (NSString *)[defaults 
						objectForKey:@"CanaryMaxShownUpdates"];
	return [maxShownUpdatesString integerValue];
}

// Returns the selected URL shortener
- (int) selectedURLShortener {
	NSString *selectedURLShortener = (NSString *)[defaults 
								objectForKey:@"CanarySelectedURLShortener"];
	if ([selectedURLShortener isEqualToString:@"Adjix"])
		return ORSAdjixShortenerType;
	else if ([selectedURLShortener isEqualToString:@"Bit.ly"])
		return ORSBitlyShortenerType;
	else if ([selectedURLShortener isEqualToString:@"Cli.gs"])
		return ORSCligsShortenerType;
	else if ([selectedURLShortener isEqualToString:@"Is.gd"])
		return ORSIsgdShortenerType;
	//if ([selectedURLShortener isEqualToString:@"TinyURL"])
	else
		return ORSTinyURLShortenerType;
}

@end
